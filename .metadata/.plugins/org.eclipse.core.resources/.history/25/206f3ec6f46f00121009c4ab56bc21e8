/*******************************************************************************
 * Copyright 2011 See AUTHORS file.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/

package com.badlogic.gdx.graphics.g3d.test;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.GL10;
import com.badlogic.gdx.graphics.PerspectiveCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.ParticleEffect;
import com.badlogic.gdx.graphics.g2d.ParticleEmitter;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
import com.badlogic.gdx.graphics.g3d.loaders.ogre.OgreXmlLoader;
import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
import com.badlogic.gdx.graphics.g3d.materials.Material;
import com.badlogic.gdx.graphics.g3d.materials.TextureAttribute;
import com.badlogic.gdx.graphics.g3d.model.Model;
import com.badlogic.gdx.graphics.g3d.model.keyframe.KeyframedModel;
import com.badlogic.gdx.graphics.g3d.model.skeleton.SkeletonKeyframe;
import com.badlogic.gdx.graphics.g3d.model.skeleton.SkeletonModel;
import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
import com.badlogic.gdx.graphics.g3d.model.still.StillSubMesh;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.math.collision.BoundingBox;
import com.badlogic.gdx.utils.Array;
import com.westernarc.graphics.AnimNode;
import com.westernarc.graphics.BossNodeSakuya;
import com.westernarc.graphics.Node;
import com.westernarc.graphics.PlayerNode;

public class Viewer implements ApplicationListener {
	PlayerNode animTest;
	
	ParticleEffect effect;
	SpriteBatch batch;
	
	public static void main (String[] argv) {
		new LwjglApplication(new Viewer(), "Viewer", 480, 320, false);
	}

	PerspectiveCamera cam;
	float angle = 0;

	@Override
	public void create () {
		animTest = new PlayerNode();
		//Set up meshes

		cam = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());

		cam.position.set(Vector3.Zero.add(1, 4,5));
		cam.lookAt(0,0,0);
		
		cam.near = 0.01f;
		cam.far = 1000;
		
		//Set up particle effect
		effect = new ParticleEffect();
		effect.load(Gdx.files.internal("8burst.p"), Gdx.files.internal(""));
		
		batch = new SpriteBatch();
	}

	@Override
	public void resume () {}

	@Override
	public void render () {
		Gdx.gl10.glClearColor(0.2f, 0.2f, 0.2f, 1);
		Gdx.gl10.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
		
		Gdx.gl10.glEnable(GL10.GL_DEPTH_TEST);
		Gdx.gl10.glEnable(GL10.GL_TEXTURE_2D);
		Gdx.gl10.glEnable(GL10.GL_COLOR_MATERIAL);
		

		animTest.setDestination(new Vector3(Gdx.input.getX() - 240,-Gdx.input.getY() + 160,0));
		cam.update();
		cam.apply(Gdx.gl10);

		animTest.update(Gdx.graphics.getDeltaTime());

		drawNode(animTest.skirtNode);
		drawNode(animTest.torsoNode);
		drawNode(animTest);

		Gdx.gl10.glDisable(GL10.GL_DEPTH_TEST);
		Gdx.gl10.glDisable(GL10.GL_TEXTURE_2D);
		
		if(Gdx.input.isTouched() && effect.isComplete()) {
			effect.start();
		}
		if(Gdx.input.isKeyPressed(Keys.A)) effect.getEmitters().get(0).setPosition(10, 0);
		batch.setProjectionMatrix(cam.combined);
		batch.begin();
		effect.draw(batch, Gdx.graphics.getDeltaTime());
		batch.end();
	}
	private void drawNode(Node node) {
		Gdx.gl10.glPushMatrix();
		
		Gdx.gl10.glTranslatef(node.getTranslation().x, node.getTranslation().y, node.getTranslation().z);
		Gdx.gl10.glRotatef(node.getRotation().x, 1, 0, 0);
		Gdx.gl10.glRotatef(node.getRotation().y, 0, 1, 0);
		Gdx.gl10.glRotatef(node.getRotation().z, 0, 0, 1);
		Gdx.gl10.glScalef(node.getScale().x, node.getScale().y, node.getScale().z);
		
		if(node.getModel() != null) node.getModel().render();
		
		Iterator<Node> nodeItr = node.children.iterator();
		while(nodeItr.hasNext()) {
			drawNode(nodeItr.next());
		}
		
		Gdx.gl10.glPopMatrix();
	}

	@Override
	public void resize (int width, int height) {}
	@Override
	public void pause () {}
	@Override
	public void dispose () {}
}
