/*******************************************************************************
 * Copyright 2011 See AUTHORS file.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/

package com.badlogic.gdx.graphics.g3d.test;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.GL10;
import com.badlogic.gdx.graphics.PerspectiveCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.ParticleEffect;
import com.badlogic.gdx.graphics.g2d.ParticleEmitter;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
import com.badlogic.gdx.graphics.g3d.loaders.ogre.OgreXmlLoader;
import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
import com.badlogic.gdx.graphics.g3d.materials.Material;
import com.badlogic.gdx.graphics.g3d.materials.TextureAttribute;
import com.badlogic.gdx.graphics.g3d.model.Model;
import com.badlogic.gdx.graphics.g3d.model.keyframe.KeyframedModel;
import com.badlogic.gdx.graphics.g3d.model.skeleton.SkeletonKeyframe;
import com.badlogic.gdx.graphics.g3d.model.skeleton.SkeletonModel;
import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
import com.badlogic.gdx.graphics.g3d.model.still.StillSubMesh;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.math.collision.BoundingBox;
import com.badlogic.gdx.utils.Array;
import com.westernarc.graphics.AnimNode;
import com.westernarc.graphics.Node;
import com.westernarc.graphics.PlayerNode;

public class Viewer implements ApplicationListener {
	AnimNode animTest;
	
	ParticleEffect effect;
	Array<ParticleEmitter> emitters;
	SpriteBatch batch;
	
	public static void main (String[] argv) {
		new LwjglApplication(new Viewer(), "Viewer", 480, 320, false);
	}

	PerspectiveCamera cam;
	float angle = 0;

	@Override
	public void create () {
		animTest = new AnimNode(1,28);
		//Set up meshes
		Texture texture = new Texture(Gdx.files.internal("yuyuko.png"));
		Material mat = new Material("mat", new TextureAttribute(texture, 0, "s_tex"), new ColorAttribute(Color.WHITE, ColorAttribute.diffuse));
		
		for(int i = 1; i <= 28; i++) {
			animTest.models[i] = ModelLoaderRegistry.loadStillModel(Gdx.files.internal("animtorso/yuanimtorso" + i + ".g3dt"));
			animTest.models[i].setMaterial(mat);
		}
		animTest.cycleTime = 1/30f;
		
		cam = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());

		cam.position.set(Vector3.Zero.add(0, 4,16));
		cam.lookAt(0,0,0);
		
		cam.near = 0.01f;
		cam.far = 1000;
		
		//Set up particle effect
		effect = new ParticleEffect();
		effect.load(Gdx.files.internal("8burst.p"), Gdx.files.internal(""));
		batch = new SpriteBatch();
		effect.getEmitters().add(new ParticleEmitter());
		effect.getEmitters().add(new ParticleEmitter());
		//emitters = new Array(effect.getEmitters());
		//effect.getEmitters().add(emitters.get(0));
		//emitters.get(0).start();
	}

	@Override
	public void resume () {}

	//float[] lightColor = {1, 1, 1, 0};
	//float[] lightPosition = {0, 0, 5, 0};

	@Override
	public void render () {

		
		Gdx.gl10.glClearColor(0.2f, 0.2f, 0.2f, 1);
		Gdx.gl10.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
		
		Gdx.gl10.glEnable(GL10.GL_DEPTH_TEST);
		Gdx.gl10.glEnable(GL10.GL_TEXTURE_2D);
		//Gdx.gl10.glEnable(GL10.GL_LIGHTING);
		Gdx.gl10.glEnable(GL10.GL_COLOR_MATERIAL);
		

		
		cam.update();
		cam.apply(Gdx.gl10);
		/*
		Gdx.gl10.glEnable(GL10.GL_LIGHT0);
		Gdx.gl10.glLightfv(GL10.GL_LIGHT0, GL10.GL_DIFFUSE, lightColor, 0);
		Gdx.gl10.glLightfv(GL10.GL_LIGHT0, GL10.GL_POSITION, lightPosition, 0);
		 */
		angle += 45 * Gdx.graphics.getDeltaTime();

		animTest.update(Gdx.graphics.getDeltaTime());
		//System.out.println(animTest.curFrame);
		//animTest.getModel().render();

		//Gdx.gl10.glDisable(GL10.GL_LIGHTING);
		Gdx.gl10.glDisable(GL10.GL_DEPTH_TEST);
		Gdx.gl10.glDisable(GL10.GL_TEXTURE_2D);
		
		batch.setProjectionMatrix(cam.combined);
		if(Gdx.input.isTouched()) {
			if(effect.isComplete()) {
				effect.getEmitters().get(0).setPosition(Gdx.input.getX()/480f, Gdx.input.getY()/320f);
				effect.getEmitters().get(0).start();
				effect.getEmitters().get(1).start();
			}
		}
		batch.begin();
		effect.draw(batch, Gdx.graphics.getDeltaTime());
		batch.end();
	}


	@Override
	public void resize (int width, int height) {}
	@Override
	public void pause () {}
	@Override
	public void dispose () {}
}
