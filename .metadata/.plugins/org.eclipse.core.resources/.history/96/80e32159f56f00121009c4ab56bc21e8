package com.westernarc.graphics;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
import com.badlogic.gdx.graphics.g3d.loaders.g3d.chunks.G3dExporter;
import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
import com.badlogic.gdx.graphics.g3d.materials.Material;
import com.badlogic.gdx.graphics.g3d.materials.TextureAttribute;
import com.badlogic.gdx.graphics.g3d.model.Model;
import com.badlogic.gdx.math.Vector3;

public class PlayerNode extends Node {
	AnimNode torso, head, skirt;
	public Node torsoNode, skirtNode;
	
	private static final float changeFactor = 1.1f;
	private static final float resetRate = 1.4f;
	
	private static final float diffMax = 10;
	//Largest angle rotation can be
	private static final float rotateMax = 20;

	//Farthest away that input will matter for
	//destination and rotation calculations
	float inputMax = 100;
	
	//Model floats up and down
	float floatMax = 0.5f; 
	float floatMin = 0f;
	float floatRate = 0.005f;
	float currentFloat;
	boolean rising;
	
	
	private Vector3 destination;
	private Vector3 target;
	
	//Stores whether or not the player is firing bullets
	private boolean firing;
	
	public boolean isFiring() {
		return firing;
	}
	public void setFiring(boolean f) {
		firing = f;
	}	
	public Vector3 getTarget() {
		return target;
	}
	public void setTarget(Vector3 target) {
		this.target = target;
	}
	public Vector3 getDestination () {
		return destination;
	}
	public void setDestination (Vector3 destination) {
		this.destination = destination;
	}
	public PlayerNode() {
		destination = new Vector3();
		head = new AnimNode(1,14);
		skirt = new AnimNode(1,14);
		torso = new AnimNode(1,14);
		
		Texture texture = new Texture(Gdx.files.internal("textures/yuyuko.png"));
		Material mat = new Material("mat", new TextureAttribute(texture, 0, "s_tex"), new ColorAttribute(Color.WHITE, ColorAttribute.diffuse));

		for(int i = 1; i <= 14; i++) {
			torso.models[i] = ModelLoaderRegistry.loadStillModel(Gdx.files.internal("models/animYuyuko/animTorso/yuanimtorso" + i + ".g3dt"));
			//G3dExporter.export(torso.models[i], Gdx.files.local("models/animtorso/yuanimtorso"+i+".g3d"));
			torso.models[i].setMaterial(mat);
		}
		torso.setCycleTime(1/30f);
		torsoNode = new Node();
		torsoNode.addChild(torso);
		
		for(int i = 1; i <= 14; i++) {
			head.models[i] = ModelLoaderRegistry.loadStillModel(Gdx.files.internal("models/animYuyuko/animHead/yuanimhead" + i + ".g3dt"));
			head.models[i].setMaterial(mat);
		}
		head.setCycleTime(1/30f);
		addChild(head);

		for(int i = 1; i <= 14; i++) {
			skirt.models[i] = ModelLoaderRegistry.loadStillModel(Gdx.files.internal("models/animYuyuko/animSkirt/yuanimskirt" + i + ".g3dt"));
			skirt.models[i].setMaterial(mat);
		}
		skirt.setCycleTime(1/30f);
		
		skirtNode = new Node();
		skirtNode.addChild(skirt);
		skirtNode.translation.z = -1.8f;
		//20,0.2f,-1.6f);
		
		currentFloat = 0;
		rising = true;
	}
	public AnimNode getHead() {
		return head;
	}
	public AnimNode getTorso() {
		return torso;
	}
	public AnimNode getSkirt() {
		return skirt;
	}
	public void update(float tpf) {
		if(rotation.x > 0) rotate(-resetRate/2,0,0);
		if(rotation.x < 0) rotate(resetRate/2,0,0);
		if(rotation.y > 0) rotate(0,-resetRate/2,0);
		if(rotation.y < 0) rotate(0,resetRate/2,0);
		if(rotation.z > 0) rotate(0,0,-resetRate/2);
		if(rotation.z < 0) rotate(0,0,resetRate/2);
		
		//Handle floating
		if(!rising) {
			torso.translate(0, 0, -floatRate);
		} else {
			torso.translate(0, 0, floatRate);
		}
		if(torso.getTranslation().z > floatMax) rising = false;
		if(torso.getTranslation().z < floatMin) rising = true;
		
		//Handle destination calculation and model rotation
		Vector3 diff = destination.cpy().sub(translation).mul(0.1f);
		
		//float dist = diff.len();
		//if(dist > diffMax) diff.nor().mul(diffMax); 

		
		//Rotate by the destination vector

		setRotation(-diff.y, diff.x, 0);
		skirtNode.setRotation(-diff.y*3, diff.x*3, 0);
		torsoNode.setRotation(-diff.y*2f, diff.x*2f, 0);

		//Update each animation
		torso.update(tpf);
		head.update(tpf);
		skirt.update(tpf);
		skirtNode.translation.x = translation.x;// - diff.x;
		skirtNode.translation.y = translation.y - diff.y - 5;
		torsoNode.translation.x = translation.x;
		torsoNode.translation.y = translation.y;
	}
	
	@Override
	public void setScale(float s) {
		super.setScale(s);
		skirtNode.setScale(s);
		torsoNode.setScale(s);
	}
}