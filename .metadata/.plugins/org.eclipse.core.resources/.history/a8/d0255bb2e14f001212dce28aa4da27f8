package com.westernarc.yuurei;

import java.util.ArrayList;
import java.util.Iterator;

import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.GL10;
import com.badlogic.gdx.graphics.PerspectiveCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g3d.loaders.ogre.OgreXmlLoader;
import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
import com.badlogic.gdx.graphics.g3d.materials.Material;
import com.badlogic.gdx.graphics.g3d.materials.TextureAttribute;
import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer.ShapeType;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.math.collision.BoundingBox;
import com.westernarc.yuurei.graphics.Node;
import com.westernarc.yuurei.entities.*;
import com.westernarc.yuurei.graphics.PlayerNode;
import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
import com.badlogic.gdx.graphics.g3d.materials.Material;
import com.badlogic.gdx.graphics.g3d.materials.TextureAttribute;

public class Yuurei implements ApplicationListener {
	float SCREEN_WIDTH;
	float SCREEN_HEIGHT;
	
	private PerspectiveCamera camera;
	
	private ShapeRenderer shapeRenderer;
	private ShapeRenderer uiRenderer;
	private SpriteBatch batch;
	private BitmapFont font;
	
	//3D assets.
	//Player node is for the player character
	//Consists of torso and two arms
	PlayerNode playerNode;
	StillModel torso;
	StillModel lArm;
	StillModel rArm;
	
	//Model loader
	OgreXmlLoader modelLoader;
	
	//Objects
	Player player;
	ArrayList<Enemy> enemies;
	ArrayList<Bullet> bullets; //From enemy
	ArrayList<Bullet> shots; //From player
	
	private static final int MAX_CURSORS = 2;
	Vector3[] cursor; //Stores 2 cursors
	
	float RIGHT_MOUSE_X;
	float RIGHT_MOUSE_Y;
	float RIGHT_MOUSE_RADIUS;
	float LEFT_MOUSE_X;
	float LEFT_MOUSE_Y;
	float LEFT_MOUSE_RADIUS;
	
	Vector3 RIGHT_MOUSE;
	Vector3 LEFT_MOUSE;
	
	float PLAYFIELD_WIDTH;
	float PLAYFIELD_HEIGHT;
	
	//GAME VARIABLES
	int gameLife;
	int gameScore;
	int gameLevel;
	float gameTime;
	
	//State structure:
	//Title -(continue)> Game.play -(death)> Game.score -(retry)> Game.play
	//State of application
	private enum APP_STATE {
		SPLASH, GAME
	};
	//State within game state
	private enum GAME_STATE {
		TITLE, PLAY, SCORE;
	}
	APP_STATE appState;
	GAME_STATE gameState;
	
	private boolean gamePaused;
	
	//Timer for score screen
	private float stateChangeTime;
	private final float STATECHANGE_MIN_TIME = 0;
	
	//Fade value
	private float fadeValue;
	private float FADE_MIN = 0;
	private float FADE_MAX = 1;
	private boolean fading;
	//Timer for fading the splash screen
	//Tracks the time spent after being clicked
	private float splashScreenTime; 
	private static final float SPLASHSCREEN_MAX_TIME = 0;
	private boolean splashScreenToEnd;
	private boolean splashScreenEnded;
	
	//Angle that camera is rotated at the beginning of the game
	//The angle starts at an initial angle the first time the game starts.
	//The angle turns downward during gameplay, and stays there.
	//The angle starts at the init angle and ends at the targ angle.
	private final static float CAM_INIT_ANGLE = 70;
	private final static float CAM_TARG_ANGLE = 0;
	private float camAngle;
	
	private void loadModels() {
		modelLoader = new OgreXmlLoader();
		
		Texture tex = new Texture(Gdx.files.internal("yuyuko.png"));
		Material mat = new Material("mat", new TextureAttribute(tex, 0, "s_tex"), new ColorAttribute(Color.WHITE, "diffuseColor"));
		
		torso = modelLoader.load(Gdx.files.internal("yutorso.mesh.xml"));
		rArm = modelLoader.load(Gdx.files.internal("yuarmR.mesh.xml"));
		lArm = modelLoader.load(Gdx.files.internal("yuarmL.mesh.xml"));
		
		torso.setMaterial(mat);
		rArm.setMaterial(mat);
		lArm.setMaterial(mat);
		
		playerNode = new PlayerNode();
		playerNode.setTModel(torso);
		playerNode.setLModel(lArm);
		playerNode.setRModel(rArm);
		playerNode.scale(0.1f,0.1f,0.1f);
	}
	@Override
	public void create() {
		//SCREEN_WIDTH = Gdx.graphics.getWidth();
		//SCREEN_HEIGHT = Gdx.graphics.getHeight();
		//From Sony Xperia Ion
		SCREEN_WIDTH = 1280;
		SCREEN_HEIGHT = 720;
		initGame();
	}
	private void initGame() {
		appState = APP_STATE.SPLASH;
		gameState = GAME_STATE.TITLE;
		
		RIGHT_MOUSE_RADIUS = SCREEN_HEIGHT / 4;
		LEFT_MOUSE_RADIUS = RIGHT_MOUSE_RADIUS;
		RIGHT_MOUSE_X = SCREEN_WIDTH - RIGHT_MOUSE_RADIUS - 10;
		RIGHT_MOUSE_Y = RIGHT_MOUSE_RADIUS + 10;
		LEFT_MOUSE_X = LEFT_MOUSE_RADIUS + 10;
		LEFT_MOUSE_Y = LEFT_MOUSE_RADIUS + 10;
		
		RIGHT_MOUSE = new Vector3(RIGHT_MOUSE_X, RIGHT_MOUSE_Y, 0);
		LEFT_MOUSE = new Vector3(LEFT_MOUSE_X, LEFT_MOUSE_Y, 0);
		
		PLAYFIELD_WIDTH = 600;
		PLAYFIELD_HEIGHT = 600;
		
		camera = new PerspectiveCamera(40, SCREEN_WIDTH, SCREEN_HEIGHT);
		camera.position.set(0,0,800);
		camera.far = 3000;
		camAngle = CAM_INIT_ANGLE;
		camera.rotate(Vector3.X, camAngle);
		
		batch = new SpriteBatch();
		font = new BitmapFont();
		shapeRenderer = new ShapeRenderer();
		uiRenderer = new ShapeRenderer();
		uiRenderer.translate(SCREEN_WIDTH/2, SCREEN_HEIGHT/2, 0);
		player = new Player();
		
		enemies = new ArrayList<Enemy>();
		bullets = new ArrayList<Bullet>();
		shots = new ArrayList<Bullet>();
		
		cursor = new Vector3[MAX_CURSORS];
		cursor[0] = new Vector3();
		cursor[1] = new Vector3();
		
		gameLife = 100;
		gameLevel = 1;
		
		stateChangeTime = 0;
		
		splashScreenTime = 0;
		splashScreenEnded = false;
		splashScreenToEnd = false;
		
		loadModels();
		
		unfade();
		fadeValue = 1;
	
		unpauseGame();
	}
	private void update(float tpf) {
		handleTouchInput();
		//Update loop.  Switch depending on state.
		switch(appState) {
			case SPLASH:
				updateSplashState(tpf);
				break;
			case GAME:
				updateGameState(tpf);
				break;
		}
	}
	private void updateSplashState(float tpf) {
		batch.begin();
		font.setColor(1f, 1f, 1f, 1.0f);
		font.setScale(4.8f);
		font.draw(batch, "LOGO",140,540);
		font.draw(batch, "(press to skip)",140,140);
		batch.end();
		if(splashScreenToEnd) splashScreenTime += tpf;
		if(splashScreenTime > SPLASHSCREEN_MAX_TIME) {
			appState = APP_STATE.GAME;
			pauseGame();
		}
	}
	private void updateEntities(float tpf) {
		player.update(tpf);
	}
	private void updateGameState(float tpf) {
		updateGameVars();
		switch(gameState) {
			case TITLE:
				batch.begin();
				font.setColor(1f, 1f, 1f, 1.0f);
				font.setScale(1.8f);
				font.draw(batch, "Click to start!", 0, 140);
				font.setScale(5);
				font.draw(batch, "Title", 0, 500);
				batch.end();
				drawBackground();
				break;
			case SCORE:
				showScore();
			case PLAY:
				drawUI();
				drawBackground();
				
				//Move camera to follow player
				//camera.update(true);
				camera.position.x = player.getX();
				camera.position.y = player.getY();
				
				//Camera starts at CAM INIT ANGLE at the start of PLAY state.
				//If the camera hasn't shifted down yet, shift it down
				if(camAngle > CAM_TARG_ANGLE) {
					float delta = camAngle;
					camAngle -= (tpf) * (camAngle - CAM_TARG_ANGLE);
					delta -= camAngle;
					camera.rotate(Vector3.X, -delta);
				}
				//Update if not paused
				if(!isPaused()) {
					updateEntities(tpf);
				}
				//Draw the player
				drawPlayer();
				
				//Only check collisions every 2 frames
				currentFrame++;
				if(currentFrame % collisionRate == 0) checkBulletCollisions();
				drawEnemies();

				drawBullets();
				break;
		}
		//If it's score state, allow clicking on the button to replay
		//Disable moving the controller for the player
		//Show end text and prompt to click again
		/*if(gameState == GAME_STATE.SCORE) {
			showScore();
		}*/
	}
	private void showScore() {
		batch.begin();
		font.setColor(1f, 1f, 1f, 1.0f);
		font.setScale(1.8f);
		font.draw(batch, "Your score: " + gameScore, 0, 540);
		font.draw(batch, "Click to restart", 0, 160);
		batch.end();
	}
	@Override
	public void dispose() {
	}
	private void drawUI() {
		batch.begin();
		font.setColor(1f, 1f, 1f, 1.0f);
		font.setScale(1.8f);
		/*
		font.draw(batch, "vector: " + player.getVector().toString(), 0, 160);
		font.draw(batch, "destination: " + player.getDestination().toString(), 0, 150);
		*/font.draw(batch, "direction: " + player.getDirection().toString(), 0, 140);
		font.draw(batch, "rotation: " + player.getRotation().toString(), 0, 130);/*
		font.draw(batch, "cursor1: " + cursor[0].toString(), 200, 160);
		font.draw(batch, "cursor2: " + cursor[1].toString(), 200, 150);
		*/
		font.draw(batch, "life: " + gameLife, SCREEN_WIDTH/2 - 400, SCREEN_HEIGHT);
		font.draw(batch, "score: " + gameScore, SCREEN_WIDTH/2, SCREEN_HEIGHT);
		font.draw(batch, "level: " + gameLevel, SCREEN_WIDTH/2 - 200, SCREEN_HEIGHT);
		font.draw(batch, "time: " + gameTime, SCREEN_WIDTH/2 + 200, SCREEN_HEIGHT);
		batch.end();
		
		//Draw touch circles
		//shapeRenderer = new ShapeRenderer();
		uiRenderer.setColor(0.8f,0.8f,0.8f,1);
		uiRenderer.begin(ShapeType.Circle);
		uiRenderer.circle(RIGHT_MOUSE_X - SCREEN_WIDTH / 2, RIGHT_MOUSE_Y - SCREEN_HEIGHT / 2, RIGHT_MOUSE_RADIUS);
		uiRenderer.circle(LEFT_MOUSE_X - SCREEN_WIDTH / 2, LEFT_MOUSE_Y - SCREEN_HEIGHT / 2, LEFT_MOUSE_RADIUS);
		uiRenderer.end();
	}
	private void drawBackground() {
		shapeRenderer.setColor(0.2f,0,0,1);
		//Draw play field
		shapeRenderer.begin(ShapeType.Box);
		shapeRenderer.box(-PLAYFIELD_WIDTH/2, -PLAYFIELD_HEIGHT/2, 10, PLAYFIELD_WIDTH, PLAYFIELD_HEIGHT, 10);
		shapeRenderer.box(-PLAYFIELD_WIDTH*2, -PLAYFIELD_HEIGHT*2, 40, PLAYFIELD_WIDTH*4, PLAYFIELD_HEIGHT*4, 40);
		shapeRenderer.setColor(0.5f,0.2f,0.0f,1);
		//Draw tree
		shapeRenderer.box(-20,PLAYFIELD_HEIGHT*2,30,40,40,-400);
		shapeRenderer.end();		
	}
	private void drawPlayer() {
		//shapeRenderer = new ShapeRenderer();
		//shapeRenderer.setProjectionMatrix(camera.projection);
		shapeRenderer.setColor(1,1,1,1);
		
		//Draw player direction
		shapeRenderer.begin(ShapeType.Line);
		shapeRenderer.line(player.getX(), player.getY(), player.getDirection().x*30 + player.getX(), player.getDirection().y*30 + player.getY());
		shapeRenderer.line(player.getX(), player.getY(), (player.getDirection().cpy()).nor().mul(20).x + player.getX(), (player.getDirection().cpy()).nor().mul(20).y + player.getY());
		shapeRenderer.end();
		shapeRenderer.begin(ShapeType.Box);
		//Draw player destination
		shapeRenderer.box(player.getDestination().x, player.getDestination().y, player.getDestination().z, 2,2,0);
		//Draw player target
		shapeRenderer.box(player.getTarget().x, player.getTarget().y, player.getTarget().z, 2,2,0);
		//Draw player body
		//shapeRenderer.translate(player.getX(), player.getY(), player.getZ());
		/*shapeRenderer.rotate(1, 0, 0, player.getRotX());
		shapeRenderer.rotate(0, 1, 0, player.getRotY());
		shapeRenderer.rotate(0, 0, 1, player.getRotZ());*/
		shapeRenderer.box(player.getX()-player.getSizeX()/2, player.getY()-player.getSizeY()/2, player.getZ()-player.getSizeZ()/2, player.getSizeX(), player.getSizeY(), player.getSizeZ());
		shapeRenderer.box(player.getX()-player.getSizeX()/4, player.getY()+player.getSizeY()/4, -player.getSizeZ()/2, player.getSizeX()/2, player.getSizeY()/2, player.getSizeZ());
		shapeRenderer.end();
	}
	private void drawEnemies() {
		//If there are less than 30 enemies, give a chance to spawn a new enemy
		if(Math.random() > 0.8f) {
			Enemy newEnemy = new Enemy();
			newEnemy.setVector(player.getVector().cpy().add(50 + ((float)Math.random()-0.5f)*40, 50 + ((float)Math.random()-0.5f)*40,0));
			if(enemies.size() < gameTime / 2) enemies.add(newEnemy);
		}
		Iterator<Enemy> enem = enemies.iterator();
		while(enem.hasNext()) {
			Enemy curEnemy = enem.next();
			//Update each enemy, if the game is not paused
			if(!isPaused()) curEnemy.update(1/60f);
			
			curEnemy.setTarget(player.getVector());
			curEnemy.setDestination(player.getVector());
			//Shoot from enemy
			if(Math.random() > 0.95) {
				fireBullet(curEnemy);
			}
			//shapeRenderer = new ShapeRenderer();
			//shapeRenderer.setProjectionMatrix(camera.projection);
			shapeRenderer.setColor(1,0,0,1);
			shapeRenderer.begin(ShapeType.Box);
			//shapeRenderer.translate(curEnemy.getX(), curEnemy.getY(), curEnemy.getZ());
			/*
			shapeRenderer.rotate(1, 0, 0, curEnemy.getRotX());
			shapeRenderer.rotate(0, 1, 0, curEnemy.getRotY());
			shapeRenderer.rotate(0, 0, 1, curEnemy.getRotZ());*/
						
			shapeRenderer.box(curEnemy.getX()-curEnemy.getSizeX()/2, curEnemy.getY()-curEnemy.getSizeY()/2, -curEnemy.getSizeZ()/2, curEnemy.getSizeX(), curEnemy.getSizeY(), curEnemy.getSizeZ());
			shapeRenderer.end();
		}
	}
	private void drawBullets() {
		Iterator<Bullet> bull = bullets.iterator();
		while(bull.hasNext()) {
			Bullet curBullet = bull.next();
			if(curBullet.getX() > PLAYFIELD_WIDTH/2 || curBullet.getX() < -PLAYFIELD_WIDTH/2 || curBullet.getY() > PLAYFIELD_HEIGHT/2 || curBullet.getY() < -PLAYFIELD_HEIGHT/2) {
				bull.remove();
			}
			//Update each bullet if the game is not paused
			if(!isPaused()) curBullet.update(1/60f);
			
			//shapeRenderer = new ShapeRenderer();
			//shapeRenderer.setProjectionMatrix(camera.projection);
			shapeRenderer.setColor(1,0,0,1);
			shapeRenderer.begin(ShapeType.Box);
			//shapeRenderer.translate(curBullet.getX(), curBullet.getY(), curBullet.getZ());
			/*
			shapeRenderer.rotate(1, 0, 0, curBullet.getRotX());
			shapeRenderer.rotate(0, 1, 0, curBullet.getRotY());
			shapeRenderer.rotate(0, 0, 1, curBullet.getRotZ());*/
						
			shapeRenderer.box(curBullet.getX()-curBullet.getSizeX()/2, curBullet.getY()-curBullet.getSizeY()/2, -curBullet.getSizeZ()/2, curBullet.getSizeX(), curBullet.getSizeY(), curBullet.getSizeZ());
			shapeRenderer.end();
		}
		
		Iterator<Bullet> shotIterator = shots.iterator();
		while(shotIterator.hasNext()) {
			Bullet curBullet = shotIterator.next();
			if(curBullet.getX() > PLAYFIELD_WIDTH/2 || curBullet.getX() < -PLAYFIELD_WIDTH/2 || curBullet.getY() > PLAYFIELD_HEIGHT/2 || curBullet.getY() < -PLAYFIELD_HEIGHT/2) {
				shotIterator.remove();
			}
			
			//Update each bullet
			if(!isPaused()) curBullet.update(1/60f);
			
			//shapeRenderer = new ShapeRenderer();
			//shapeRenderer.setProjectionMatrix(camera.projection);
			shapeRenderer.setColor(0,0.4f,0,1);
			shapeRenderer.begin(ShapeType.Box);
			/*shapeRenderer.translate(curBullet.getX(), curBullet.getY(), curBullet.getZ());

			shapeRenderer.rotate(1, 0, 0, curBullet.getRotX());
			shapeRenderer.rotate(0, 1, 0, curBullet.getRotY());
			shapeRenderer.rotate(0, 0, 1, curBullet.getRotZ());*/
						
			shapeRenderer.box(curBullet.getX()-curBullet.getSizeX()/2, curBullet.getY()-curBullet.getSizeY()/2, -curBullet.getSizeZ()/2, curBullet.getSizeX(), curBullet.getSizeY(), curBullet.getSizeZ());
			shapeRenderer.end();
		}
	}
	private void checkBulletCollisions() {
		//Check shot-to-enemy collisions
		Iterator<Enemy> ent = enemies.iterator();
		while(ent.hasNext()) {
			//To avoid illegalstateexceptions when removing
			//entities, exit the inner loop after a collision
			//is detected
			boolean removeEnemy = false;
			Enemy e = ent.next();
			//For each entity in the arraylist, check if each entity
			//has a collision with each bullet
			
			Iterator<Bullet> shotIterator = shots.iterator();
			while(shotIterator.hasNext()) {
				Bullet b = shotIterator.next();
				
				//If there is a collision, remove both
				if(e.collidesWith(b)) {
					shotIterator.remove();
					removeEnemy = true;
					onEnemyKilled();
				}
				if(removeEnemy) break;
			}
			if(removeEnemy) ent.remove();
		}
		
		//Check bullet-to-player collisions
		Iterator<Bullet> bulletIterator = bullets.iterator();
		while(bulletIterator.hasNext()) {
			Bullet b = bulletIterator.next();
			//If there is a collision, register hit on player
			if(b.collidesWith(player)) {
				bulletIterator.remove();
				onPlayerHit();
			}
		}
	}
	//Called when a bullet hits player
	private void onPlayerHit() {
		if(gameLife - 10 <= 0) 
			onPlayerDeath();
		else 
			gameLife -= 10;
	}
	//Called when player health reaches 
	private void onPlayerDeath() {
		gameState = GAME_STATE.SCORE;
		//Pause game on death
		pauseGame();
	}
	//Called when a player shot hits an enemy
	private void onEnemyKilled() {
		gameScore += 10;
	}
	//Called when, during game_state.score,
	//the player chooses to replay
	private void onGameReplay() {
		camera.position.set(0,0,800);
		
		gameState = GAME_STATE.PLAY;
		unpauseGame();
		gameLife = 100;
		gameScore = 0;
		gameLevel = 1;
		gameTime = 0;
		player.setVector(0,0,0);
		player.setDestination(0,0,0);
		player.setTarget(0,0,0);
		player.setDirection(0,0,0);
		player.setRotation(0, 0, 0);
		enemies.clear();
		bullets.clear();
		shots.clear();
		
		stateChangeTime = 0;
		fadeValue = 0;
		fading = false;
	}
	private void updateGameVars() {
		//If game is showing the score, increment the score
		//timer.  This score time must be over the SCORE_MIN time
		//for the game to continue from the score screen.
		if(!isPaused()) gameTime += Gdx.graphics.getDeltaTime();
		else stateChangeTime += Gdx.graphics.getDeltaTime(); 
			
		if(((float)gameScore / (100*gameLevel))> 1) {
			gameLevel++;
		}
	}
	private void updateFade(float tpf) {
		if(fading) {
			fadeValue += tpf;
		} else {
			fadeValue -= tpf;
		}
		if(fadeValue > FADE_MAX) fadeValue = FADE_MAX;
		if(fadeValue < FADE_MIN) fadeValue = FADE_MIN;
		uiRenderer.begin(ShapeType.FilledRectangle);
		uiRenderer.setColor(fadeValue, fadeValue, fadeValue, 1f);
		uiRenderer.filledRect(-SCREEN_WIDTH/2, -SCREEN_HEIGHT/2, SCREEN_WIDTH, SCREEN_HEIGHT);
		uiRenderer.end();
	}
	int currentFrame = 0;
	int collisionRate = 2;
	@Override
	public void render() {		
		Gdx.gl10.glClearColor(0, 0f, 0f, 1);
		Gdx.gl10.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
		float tpf = Gdx.graphics.getDeltaTime();
		
		//Draw fade overlay
		//Move this to the front when fill is corrected
		//Currently fills at a constant alpha value, no fading		
		updateFade(tpf);
		
		update(tpf);
		
		BoundingBox bounds = torso.subMeshes[0].mesh.calculateBoundingBox();
		camera.position.set(bounds.getCenter().cpy().add(0, 16,-2));
		camera.lookAt(bounds.getCenter().x, bounds.getCenter().y, bounds.getCenter().z);
		draw3D();
		
		camera.update(true);
		shapeRenderer.setProjectionMatrix(camera.combined);
		
		
	}
	private void draw3D() {
		Gdx.gl10.glClearColor(0.2f, 0.2f, 0.2f, 1);
		//Gdx.gl10.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
		
		Gdx.gl10.glEnable(GL10.GL_DEPTH_TEST);
		Gdx.gl10.glEnable(GL10.GL_TEXTURE_2D);
		//Gdx.gl10.glEnable(GL10.GL_LIGHTING);
		Gdx.gl10.glEnable(GL10.GL_COLOR_MATERIAL);

		//camera.apply(Gdx.gl10);
		/*
		Gdx.gl10.glEnable(GL10.GL_LIGHT0);
		Gdx.gl10.glLightfv(GL10.GL_LIGHT0, GL10.GL_DIFFUSE, lightColor, 0);
		Gdx.gl10.glLightfv(GL10.GL_LIGHT0, GL10.GL_POSITION, lightPosition, 0);
		 */

		handleKeyInput();
		if(gameState == GAME_STATE.PLAY) {
			playerNode.update();
			drawNode(playerNode);
		}
		//Gdx.gl10.glDisable(GL10.GL_LIGHTING);
		Gdx.gl10.glDisable(GL10.GL_DEPTH_TEST);
		Gdx.gl10.glDisable(GL10.GL_TEXTURE_2D);
		
	}
	private void drawNode(Node node) {
		Gdx.gl10.glPushMatrix();
		
		Gdx.gl10.glTranslatef(node.getTranslation().x, node.getTranslation().y, node.getTranslation().z);
		Gdx.gl10.glRotatef(node.getRotation().x, 1, 0, 0);
		Gdx.gl10.glRotatef(node.getRotation().y, 0, 1, 0);
		Gdx.gl10.glRotatef(node.getRotation().z, 0, 0, 1);
		Gdx.gl10.glScalef(node.getScale().x, node.getScale().y, node.getScale().z);
		
		if(node.getModel() != null) node.getModel().render();
		
		Iterator<Node> nodeItr = node.children.iterator();
		while(nodeItr.hasNext()) {
			drawNode(nodeItr.next());
		}
		
		Gdx.gl10.glPopMatrix();
	}
	private void handleKeyInput() {
		if(Gdx.input.isKeyPressed(Keys.A)) player.getDestination().add(-1,0,0);
		if(Gdx.input.isKeyPressed(Keys.D)) player.getDestination().add(1,0,0);
		if(Gdx.input.isKeyPressed(Keys.W)) player.getDestination().add(0,1,0);
		if(Gdx.input.isKeyPressed(Keys.S)) player.getDestination().add(0,-1,0);
		
		if(Gdx.input.isKeyPressed(Keys.J)) player.getTarget().add(-1,0,0);
		if(Gdx.input.isKeyPressed(Keys.L)) player.getTarget().add(1,0,0);
		if(Gdx.input.isKeyPressed(Keys.I)) player.getTarget().add(0,1,0);
		if(Gdx.input.isKeyPressed(Keys.K)) player.getTarget().add(0,-1,0);
		
		if(Gdx.input.isKeyPressed(Keys.SPACE)) {
			//splayer.setTarget(Gdx.input.getX() - Gdx.graphics.getWidth()/2, -Gdx.input.getY() + Gdx.graphics.getHeight()/2, 0);
			if(player.isReadyToFire()) {
				fireBullet(player);
				player.fire();
			}
		}
	}
	private void handleTouchInput() {
		switch(appState) {
			case SPLASH:
				if(Gdx.input.isTouched()) {
					if(!splashScreenToEnd){
						splashScreenToEnd = true;
						fade();
					}
				}
				break;
			case GAME:
				unfade();
				switch(gameState) {
					case TITLE:
						handleTitleTouchInput();
						break;
					case PLAY:
						handlePlayTouchInput();
						break;
					case SCORE:
						handleScoreTouchInput();
						break;
				}
				break;
		}
	}
	private void handleTitleTouchInput() {
		if(Gdx.input.isTouched() && stateChangeTime > STATECHANGE_MIN_TIME) {
			unpauseGame();
			gameState = GAME_STATE.PLAY;
		}
	}
	private void handlePlayTouchInput() {
		if(Gdx.input.isTouched()) {
			cursor[0].x = Gdx.input.getX(0) - SCREEN_WIDTH / 2;
			cursor[0].y = -(Gdx.input.getY(0) - SCREEN_HEIGHT / 2);
			
			cursor[1].x = Gdx.input.getX(1) - SCREEN_WIDTH / 2;
			cursor[1].y = -(Gdx.input.getY(1) - SCREEN_HEIGHT / 2);
			
			//shapeRenderer = new ShapeRenderer();
			//shapeRenderer.translate(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2, 0);
			uiRenderer.setColor(0f,0.3f,0,1);
			
			//Test if there is any contact in the left touch field
			boolean isMoving = false;
			
			//Test both cursors whether they are in the movement fields
			for(int currentCursor = 0; currentCursor < MAX_CURSORS; currentCursor++) {
				if(Gdx.input.isTouched(currentCursor)) {
					Vector3 mouseDiffRight = cursor[currentCursor].cpy().sub(RIGHT_MOUSE.x - SCREEN_WIDTH / 2, RIGHT_MOUSE.y - SCREEN_HEIGHT / 2, 0);
					//If cursor is within right mouse
					Vector3 mouseDiffLeft = cursor[currentCursor].cpy().sub(LEFT_MOUSE.x - SCREEN_WIDTH / 2, LEFT_MOUSE.y - SCREEN_HEIGHT / 2, 0);
					//If cursor is within left mouse
					
					if(Math.abs(mouseDiffRight.len()) < RIGHT_MOUSE_RADIUS) {
						player.setTarget(player.getVector().cpy().add(mouseDiffRight));
						shapeRenderer.setColor(1,0,0,1);
						fireBullet(player);
					}
					//If cursor is within left mouse
					if(Math.abs(mouseDiffLeft.len()) < LEFT_MOUSE_RADIUS) {
						isMoving = true;
						player.setMagnitude(90);
						player.setDestination(player.getVector().cpy().add(mouseDiffLeft.mul(1/player.getMagnitude())));
						uiRenderer.setColor(1,0,0,1);
					}
					uiRenderer.begin(ShapeType.Circle);
					uiRenderer.circle(cursor[currentCursor].x, cursor[currentCursor].y, 15);
					uiRenderer.end();
				}
			}
			if(!isMoving) {
				player.setMagnitude(0); 
			}
		}
	}
	private void handleScoreTouchInput() {
		//If the screen is touched during the 
		//score display phase, replay the game
		if(Gdx.input.isTouched() && stateChangeTime > STATECHANGE_MIN_TIME) {
			onGameReplay();
		}
	}
	private void fireBullet(Entity source) {
		if(source.isReadyToFire()) {
			Bullet newBull = new Bullet();
			newBull.setVector(source.getVector());
			newBull.setDirection(new Vector3(source.getTarget()).sub(source.getVector()));
			newBull.setMagnitude(1f);
			if(source instanceof Player) {
				shots.add(newBull);
			} else {
				bullets.add(newBull);
			}
			source.fire();
		}
	}
	@Override
	public void resize(int width, int height) {
	}
	@Override
	public void pause() {
	}
	@Override
	public void resume() {
	}
	private void pauseGame() {
		gamePaused = true;
	}
	private void unpauseGame() {
		gamePaused = false;
	}
	private boolean isPaused() {
		return gamePaused;
	}
	private void fade() {
		fading = true;
	}
	private void unfade() {
		fading = false;
	}
}
